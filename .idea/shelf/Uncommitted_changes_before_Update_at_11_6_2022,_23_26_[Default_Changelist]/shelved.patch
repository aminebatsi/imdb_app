Index: lib/MyHomePage.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'package:tmdb_api/tmdb_api.dart';\n\nimport 'package:flutter/material.dart';\n\nimport 'SelectedFilm.dart';\n\nclass MyHomePage extends StatefulWidget {\n  final String grandCategorie;\n  final String category;\n  final int selectedCategory;\n  const MyHomePage({\n    Key? key,\n    required this.grandCategorie,\n    this.category = 'All',\n    this.selectedCategory = 0,\n  }) : super(key: key);\n\n  // This widget is the home page of your application. It is stateful, meaning\n  // that it has a State object (defined below) that contains fields that affect\n  // how it looks.\n\n  // This class is the configuration for the state. It holds the values (in this\n  // case the title) provided by the parent (in this case the App widget) and\n  // used by the build method of the State. Fields in a Widget subclass are\n  // always marked \"final\".\n\n  //final String title;\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  List<String> category = [\n    'All',\n    'Action',\n    'Animation',\n    'Drama',\n    'Comedy',\n    'Family',\n    'Crime'\n  ];\n\n  var categoryGenres = [\n    {\"id\": 28, \"index\": 1},\n    {\"id\": 16, \"index\": 2},\n    {\"id\": 35, \"index\": 3},\n    {\"id\": 80, \"index\": 4},\n    {\"id\": 18, \"index\": 5},\n    {\"id\": 10751, \"index\": 6},\n  ];\n  var Allgenres = {\n    {\"id\": 28, \"name\": \"Action\"},\n    {\"id\": 12, \"name\": \"Adventure\"},\n    {\"id\": 16, \"name\": \"Animation\"},\n    {\"id\": 35, \"name\": \"Comedy\"},\n    {\"id\": 80, \"name\": \"Crime\"},\n    {\"id\": 99, \"name\": \"Documentary\"},\n    {\"id\": 18, \"name\": \"Drama\"},\n    {\"id\": 10751, \"name\": \"Family\"},\n    {\"id\": 14, \"name\": \"Fantasy\"},\n    {\"id\": 36, \"name\": \"History\"},\n    {\"id\": 27, \"name\": \"Horror\"},\n    {\"id\": 10402, \"name\": \"Music\"},\n    {\"id\": 9648, \"name\": \"Mystery\"},\n    {\"id\": 10749, \"name\": \"Romance\"},\n    {\"id\": 878, \"name\": \"Science Fiction\"},\n    {\"id\": 10770, \"name\": \"TV Movie\"},\n    {\"id\": 53, \"name\": \"Thriller\"},\n    {\"id\": 10752, \"name\": \"War\"},\n    {\"id\": 37, \"name\": \"Western\"},\n    {\"id\": 10759, \"name\": \"Action & Adventure\"},\n    {\"id\": 18, \"name\": \"Drama\"},\n    {\"id\": 10762, \"name\": \"Kids\"},\n    {\"id\": 10763, \"name\": \"News\"},\n    {\"id\": 10764, \"name\": \"Reality\"},\n    {\"id\": 10765, \"name\": \"Sci-Fi & Fantasy\"},\n    {\"id\": 10766, \"name\": \"Soap\"},\n    {\"id\": 10767, \"name\": \"Talk\"},\n    {\"id\": 10768, \"name\": \"War & Politics\"},\n    {\"id\": 37, \"name\": \"Western\"}\n  };\n  List trendingMovies = [];\n  final String apiKey = 'b14e6584347a3199c72afa43baddcdf8';\n  final readAccessToken =\n      'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiMTRlNjU4NDM0N2EzMTk5YzcyYWZhNDNiYWRkY2RmOCIsInN1YiI6IjYyOWY5NTJmYThiMmNhMDA2NjA5MGJhNCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.IVYqNM7Euk2jX77eh4QiMVX-4q49RctBWLrV7gNDCy4';\n\n  loadMovies() async {\n    TMDB tmdbLogs = TMDB(ApiKeys(apiKey, readAccessToken),\n        logConfig: const ConfigLogger(\n          showLogs: true,\n          showErrorLogs: true,\n        ));\n    Map trendingFilmPage1 = await tmdbLogs.v3.trending.getTrending(page: 1);\n    Map trendingFilmPage2 = await tmdbLogs.v3.trending.getTrending(page: 2);\n    Map trendingFilmPage3 = await tmdbLogs.v3.trending.getTrending(page: 3);\n    Map trendingFilmPage4 = await tmdbLogs.v3.trending.getTrending(page: 4);\n    //print(trendingFilm);\n    print(trendingFilmPage2);\n    var tempMovies = trendingFilmPage2['results'];\n\n    setState(() {\n      trendingMovies = trendingFilmPage2['results'];\n    });\n  }\n\n  @override\n  void initState() {\n    // TODO: implement initState\n    loadMovies();\n    super.initState();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    Size size = MediaQuery.of(context).size;\n\n    int SizeScreen() {\n      if (size.width < 667.0) {\n        return 2;\n      } else {\n        return 4;\n      }\n    }\n\n    print(size);\n\n    return Scaffold(\n      appBar: AppBar(\n        backgroundColor: Colors.transparent,\n        elevation: 0,\n        leading: IconButton(\n          icon: Image.asset('arrow-left-line.png'),\n          onPressed: () {},\n        ),\n        actions: const <Widget>[\n          SizedBox(\n            width: 10,\n          )\n        ],\n      ),\n      body: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: <Widget>[\n          Padding(\n            padding: const EdgeInsets.symmetric(horizontal: 20),\n            child: Text(\n              widget.grandCategorie,\n              style: Theme.of(context).textTheme.headline5,\n            ),\n          ),\n          MyWidget(selectedCategory: widget.selectedCategory),\n          Expanded(\n            child: Padding(\n              padding: const EdgeInsets.only(\n                  top: 20, right: 20, left: 20, bottom: 20),\n              child: GridView.builder(\n                  itemCount: trendingMovies.length,\n                  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n                      crossAxisCount: SizeScreen(),\n                      childAspectRatio: 0.75,\n                      mainAxisSpacing: 20,\n                      crossAxisSpacing: 20),\n                  itemBuilder: (context, index) => FilmItem(\n                        size: size,\n                        images:\n                            \"https://image.tmdb.org/t/p/w500/${trendingMovies[index]['poster_path']}\",\n                        FilmTitle: trendingMovies[index]['title'] ??\n                            trendingMovies[index]['name'],\n                        overview:\n                            trendingMovies[index]['overview'] ?? 'unavailable',\n                        realeaseDate: trendingMovies[index]['release_date'] ??\n                            'undefined',\n                      )),\n            ),\n          )\n        ],\n      ),\n    );\n  }\n}\n\nclass FilmItem extends StatelessWidget {\n  const FilmItem(\n      {Key? key,\n      required this.size,\n      required this.images,\n      required this.FilmTitle,\n      required this.overview,\n      required this.realeaseDate})\n      : super(key: key);\n\n  final Size size;\n  final String images;\n  final String FilmTitle;\n  final String overview;\n  final String realeaseDate;\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: <Widget>[\n          Expanded(\n              child: GestureDetector(\n            onTap: () {\n              Navigator.push(\n                context,\n                MaterialPageRoute(\n                  builder: (context) => SelectedFilm(\n                    images: images,\n                    FilmTitle: FilmTitle,\n                    overview: overview,\n                    realeaseDate: realeaseDate,\n                  ),\n                ),\n              );\n            },\n            child: Container(\n                padding: const EdgeInsets.all(20),\n                decoration: BoxDecoration(\n                    image: DecorationImage(\n                        image: NetworkImage(images), fit: BoxFit.fill),\n                    borderRadius: const BorderRadius.all(Radius.circular(20)))),\n          )),\n          SizedBox(\n            height: 38,\n            child: Padding(\n              padding: const EdgeInsets.only(top: 8, left: 25, right: 10),\n              child: Text(\n                FilmTitle,\n                style: const TextStyle(fontFamily: 'Comfortaa'),\n              ),\n            ),\n          ),\n        ]);\n  }\n}\n\nclass MyWidget extends StatefulWidget {\n  int selectedCategory;\n  MyWidget({Key? key, this.selectedCategory = 0}) : super(key: key);\n\n  @override\n  State<MyWidget> createState() => _MyWidgetState();\n}\n\nclass _MyWidgetState extends State<MyWidget> {\n  List<String> category = [\n    'All',\n    'Action',\n    'Horror',\n    'Drama',\n    'History',\n    'Art'\n  ];\n  //int selectedCategory ;\n  Color KtextColor = const Color(0xFF535353);\n  Color KtextLightColor = const Color(0xFFACACAC);\n\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(vertical: 20),\n      child: SizedBox(\n        height: 25,\n        child: ListView.builder(\n            scrollDirection: Axis.horizontal,\n            itemCount: category.length,\n            itemBuilder: ((context, index) => GestureDetector(\n                  onTap: () {\n                    setState(() {\n                      widget.selectedCategory = index;\n                    });\n                    Navigator.push(\n                      context,\n                      MaterialPageRoute(\n                        builder: (context) => MyHomePage(\n                            grandCategorie: 'In Cinema',\n                            category: category[index],\n                            selectedCategory: index),\n                      ),\n                    );\n                  },\n                  child: Padding(\n                    padding: const EdgeInsets.symmetric(horizontal: 20),\n                    child: Column(\n                      crossAxisAlignment: CrossAxisAlignment.start,\n                      children: [\n                        Text(\n                          category[index],\n                          style: TextStyle(\n                              fontWeight: FontWeight.bold,\n                              color: widget.selectedCategory == index\n                                  ? KtextColor\n                                  : KtextLightColor),\n                        ),\n                        Container(\n                          margin: const EdgeInsets.only(top: 5),\n                          height: 2,\n                          width: 30,\n                          color: widget.selectedCategory == index\n                              ? Colors.black\n                              : Colors.transparent,\n                        )\n                      ],\n                    ),\n                  ),\n                ))),\n      ),\n    );\n  }\n}\n\n/*\nclass CircleTabIndicator extends Decoration {\n  final BoxPainter _painter;\n\n  CircleTabIndicator({required Color color, required double radius})\n      : _painter = _CirclePainter(color, radius);\n\n  @override\n  BoxPainter createBoxPainter([VoidCallback? onChanged]) => _painter;\n}\n\nclass _CirclePainter extends BoxPainter {\n  final Paint _paint;\n  final double radius;\n\n  _CirclePainter(Color color, this.radius)\n      : _paint = Paint()\n          ..color = color\n          ..isAntiAlias = true;\n\n  @override\n  void paint(Canvas canvas, Offset offset, ImageConfiguration cfg) {\n    final Offset circleOffset =\n        offset + Offset(cfg.size!.width / 2, cfg.size!.height - radius - 5);\n    canvas.drawCircle(circleOffset, radius, _paint);\n  }\n}\n*/\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/MyHomePage.dart b/lib/MyHomePage.dart
--- a/lib/MyHomePage.dart	(revision 4d01d3624beeddadd013185a2f4cce11f1487524)
+++ b/lib/MyHomePage.dart	(date 1654986130607)
@@ -49,7 +49,7 @@
     {"id": 18, "index": 5},
     {"id": 10751, "index": 6},
   ];
-  var Allgenres = {
+  var allGenres = {
     {"id": 28, "name": "Action"},
     {"id": 12, "name": "Adventure"},
     {"id": 16, "name": "Animation"},
@@ -81,6 +81,7 @@
     {"id": 37, "name": "Western"}
   };
   List trendingMovies = [];
+  List filmByCategory = [];
   final String apiKey = 'b14e6584347a3199c72afa43baddcdf8';
   final readAccessToken =
       'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiMTRlNjU4NDM0N2EzMTk5YzcyYWZhNDNiYWRkY2RmOCIsInN1YiI6IjYyOWY5NTJmYThiMmNhMDA2NjA5MGJhNCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.IVYqNM7Euk2jX77eh4QiMVX-4q49RctBWLrV7gNDCy4';
@@ -91,19 +92,29 @@
           showLogs: true,
           showErrorLogs: true,
         ));
-    Map trendingFilmPage1 = await tmdbLogs.v3.trending.getTrending(page: 1);
+    //Map trendingFilmPage1 = await tmdbLogs.v3.trending.getTrending(page: 1);
     Map trendingFilmPage2 = await tmdbLogs.v3.trending.getTrending(page: 2);
-    Map trendingFilmPage3 = await tmdbLogs.v3.trending.getTrending(page: 3);
-    Map trendingFilmPage4 = await tmdbLogs.v3.trending.getTrending(page: 4);
+   // Map trendingFilmPage3 = await tmdbLogs.v3.trending.getTrending(page: 3);
+    //Map trendingFilmPage4 = await tmdbLogs.v3.trending.getTrending(page: 4);
     //print(trendingFilm);
-    print(trendingFilmPage2);
     var tempMovies = trendingFilmPage2['results'];
 
     setState(() {
       trendingMovies = trendingFilmPage2['results'];
     });
+    for(var i = 0 ; i<trendingMovies.length ; i++) {
+      var id = 0;
+      for (var j = 0; j < trendingMovies[i]['genre_ids'].length; j++) {
+        if (trendingMovies[i]['genre_ids'][j] == 28) {
+          filmByCategory.add(trendingMovies[i]);
+          print(filmByCategory);
+          break;
+        }
+      }
+    }
+    print("________________________");
+    print(filmByCategory);
   }
-
   @override
   void initState() {
     // TODO: implement initState
@@ -155,7 +166,7 @@
               padding: const EdgeInsets.only(
                   top: 20, right: 20, left: 20, bottom: 20),
               child: GridView.builder(
-                  itemCount: trendingMovies.length,
+                  itemCount: filmByCategory.length,
                   gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                       crossAxisCount: SizeScreen(),
                       childAspectRatio: 0.75,
@@ -164,12 +175,12 @@
                   itemBuilder: (context, index) => FilmItem(
                         size: size,
                         images:
-                            "https://image.tmdb.org/t/p/w500/${trendingMovies[index]['poster_path']}",
-                        FilmTitle: trendingMovies[index]['title'] ??
-                            trendingMovies[index]['name'],
+                            "https://image.tmdb.org/t/p/w500/${filmByCategory[index]['poster_path']}",
+                        FilmTitle: filmByCategory[index]['title'] ??
+                            filmByCategory[index]['name'],
                         overview:
-                            trendingMovies[index]['overview'] ?? 'unavailable',
-                        realeaseDate: trendingMovies[index]['release_date'] ??
+                            filmByCategory[index]['overview'] ?? 'unavailable',
+                        realeaseDate: filmByCategory[index]['release_date'] ??
                             'undefined',
                       )),
             ),
